#!/usr/bin/env bash
set -e

add() {
    [[ -n $2 ]] || { echo "Usage: steps add <step_name>" >&2; return 1; }
    git tag "step_$2"
}

remove() {
    [[ -n $2 ]] || { echo "Usage: steps remove <step_name>" >&2; return 1; }
    git tag -d "step_$2"
    git push -d origin "step_$2"
}

workon() {
    [[ -n $2 ]] || { echo "Usage: steps workon <step_name>" >&2; return 1; }
    local branch_name=steps_wip/$2

    if [ -n "$(git show-ref refs/heads/"$branch_name")" ]
    then
        git branch -d "$branch_name"
    fi
    git checkout "step_$2"
    git checkout -b "$branch_name"
}

update() {
    local current_branch=$(git rev-parse --abbrev-ref HEAD)
    local current_tag=step_$(echo "$current_branch" | cut -c 11-) # cut of steps_wip/ part of branch

    git tag -d "$current_tag"
    git tag "$current_tag"

    git rebase "$current_branch" master && sync || echo "Run 'steps sync' when the rebase is complete"
}

view() {
    [[ -n $2 ]] || { echo "Usage: steps view <step_name>" >&2; return 1; }
    git checkout "step_$2"
}

develop() {
  [[ -n $3 ]] || { echo "Usage: steps develop <from_step> <to_step>" >&2; return 1; }
  git checkout "step_$2"
  git reset --soft "step_$3"
}

diff() {
    if [ $# -eq 2 ]; then 
      git diff "step_$2"
    elif [ $# -eq 3 ]; then
      git diff "step_$2" "step_$3"
    else  
      echo "Usage: step diff <step_name> [<other_step_name>]" >&2;
      return 1;
    fi
}

list_steps() {
    git log --pretty="%d" | grep 'tag: step_' | sed -E 's/.*step_([^,]*)(, .*)?\)/\1/'
}

retag_step() {
    local old_hash=$(git rev-list -n 1 "$1")
    local commit_msg="$(git log -n 1 --pretty=format:%s "$old_hash")"
    local new_hash=$(git log --pretty="format:%H" --name-status --grep "$commit_msg" | head -n 1)

    git tag -d "$1"
    git tag "$1" "$new_hash"
}

sync() {
    echo "Syncing up steps based on commit messages..."
    for tag in $(git tag | grep ^step_) # not using list_steps, because that only incudes tags currently used
    do
        retag_step "$tag"
    done
}

clean_branches() {
    echo "Cleaning up WIP branches..."
    for branch in $(git branch | grep steps_wip/)
    do
        git push -d origin "$branch"
        git branch -D "$branch"
    done
}

usage() {
    echo "Usage: steps <command>";
    echo "Commands: add, remove, workon, update, view, diff, list, sync, cleanup";
}

if [ $# -eq 0 ]
then
    usage
    exit 1
fi

case $1 in
    'add' )
        add "$@"
        exit 0
        ;;
    'remove' )
        remove "$@"
        exit 0
        ;;
    'workon' )
        workon "$@"
        exit 0
        ;;
    'view' )
        view "$@"
        exit 0
        ;;
    'develop' )
        develop "$@"
        exit 0
        ;;
    'diff' )
        diff "$@"
        exit 0
        ;;
    'list' )
        list_steps "$@"
        exit 0
        ;;
    'update' )
        update "$@"
        exit 0
        ;;
    'sync' )
        sync "$@"
        exit 0
        ;;
    'cleanup' )
        clean_branches "$@"
        exit 0
        ;;
    'help' )
        usage
        exit 0
        ;;
    *)
        echo "steps: unrecognized command '$1'" 1>&2
        usage
        exit 1
        ;;
esac
