#!/usr/bin/env bash
set -e

add() {
	[[ $2 ]] || { echo "Usage: steps add <step_name>" >&2; return 1; }
  git tag "steps_$2"
}

remove() {
  [[ $2 ]] || { echo "Usage: steps remove <step_name>" >&2; return 1; }
  git tag -d "steps_$2"
}

workon() {
	[[ $2 ]] || { echo "Usage: steps workon <step_name>" >&2; return 1; }
  git checkout "steps_$2"
  local branch_name=steps_wip/$2

  git branch -d $branch_name || true # remove old WIP
  git checkout -b $branch_name
}

view() {
	[[ $2 ]] || { echo "Usage: steps view <step_name>" >&2; return 1; }
  git checkout "steps_$2"
}

diff() {
	[[ $2 ]] || { echo "Usage: steps diff <step_name>" >&2; return 1; }
  git diff "steps_$2"
}

update() {
    local current_branch=`git rev-parse --abbrev-ref HEAD`
    local current_tag=steps_`echo $current_branch | cut -c 11-` # cut of steps_wip/ part of branch

    git tag -d $current_tag
    git tag $current_tag

    git rebasetags $current_branch master
}

usage() {
  echo "Usage: steps <command>";
  echo "Commands: add, remove, workon, update, view, diff";
}

if [ $# -eq 0 ]
  then
    usage
    exit 1
fi

case $1 in
    'add' )
        add "$@"
        exit 0
        ;;
    'remove' )
        remove "$@"
        exit 0
        ;;
    'workon' )
        workon "$@"
        exit 0
        ;;
    'view' )
        view "$@"
        exit 0
        ;;
    'diff' )
        diff "$@"
        exit 0
        ;;
    'update' )
        update "$@"
        exit 0
        ;;
    'help' )
        usage
        exit 0
        ;;
    *)
        echo "steps: unrecognized command '$1'" 1>&2
        usage
        exit 1
        ;;
esac
